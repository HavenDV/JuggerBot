// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voiceproxy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "voiceproxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace VoiceProxyProtobuf {

namespace {

const ::google::protobuf::Descriptor* ConnectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Word_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Word_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddDataResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_voiceproxy_2eproto() {
  protobuf_AddDesc_voiceproxy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "voiceproxy.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectionRequest_descriptor_ = file->message_type(0);
  static const int ConnectionRequest_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, speechkitversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, servicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, apikey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, applicationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, coords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, punctuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, devicename_),
  };
  ConnectionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectionRequest_descriptor_,
      ConnectionRequest::default_instance_,
      ConnectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConnectionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, _internal_metadata_),
      -1);
  AddData_descriptor_ = file->message_type(1);
  static const int AddData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddData, audiodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddData, lastchunk_),
  };
  AddData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddData_descriptor_,
      AddData::default_instance_,
      AddData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddData, _has_bits_[0]),
      -1,
      -1,
      sizeof(AddData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddData, _internal_metadata_),
      -1);
  Word_descriptor_ = file->message_type(2);
  static const int Word_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, value_),
  };
  Word_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Word_descriptor_,
      Word::default_instance_,
      Word_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, _has_bits_[0]),
      -1,
      -1,
      sizeof(Word),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Word, _internal_metadata_),
      -1);
  Result_descriptor_ = file->message_type(3);
  static const int Result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, words_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, normalized_),
  };
  Result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      -1,
      -1,
      sizeof(Result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
      -1);
  AddDataResponse_descriptor_ = file->message_type(4);
  static const int AddDataResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, responsecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, recognition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, endofutt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, messagescount_),
  };
  AddDataResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddDataResponse_descriptor_,
      AddDataResponse::default_instance_,
      AddDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(AddDataResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataResponse, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_voiceproxy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectionRequest_descriptor_, &ConnectionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddData_descriptor_, &AddData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Word_descriptor_, &Word::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddDataResponse_descriptor_, &AddDataResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_voiceproxy_2eproto() {
  delete ConnectionRequest::default_instance_;
  delete ConnectionRequest_reflection_;
  delete AddData::default_instance_;
  delete AddData_reflection_;
  delete Word::default_instance_;
  delete Word_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
  delete AddDataResponse::default_instance_;
  delete AddDataResponse_reflection_;
}

void protobuf_AddDesc_voiceproxy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::BasicProtobuf::protobuf_AddDesc_basic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020voiceproxy.proto\022\022VoiceProxyProtobuf\032\013"
    "basic.proto\"\221\002\n\021ConnectionRequest\022\032\n\017pro"
    "tocolVersion\030\001 \001(\005:\0011\022\030\n\020speechkitVersio"
    "n\030\002 \002(\t\022\023\n\013serviceName\030\003 \002(\t\022\014\n\004uuid\030\004 \002"
    "(\t\022\016\n\006apiKey\030\005 \002(\t\022\027\n\017applicationName\030\006 "
    "\002(\t\022\016\n\006device\030\007 \002(\t\022\016\n\006coords\030\010 \002(\t\022\r\n\005t"
    "opic\030\t \002(\t\022\014\n\004lang\030\n \002(\t\022\016\n\006format\030\013 \002(\t"
    "\022\031\n\013punctuation\030\014 \001(\010:\004true\022\022\n\ndeviceNam"
    "e\030\r \001(\t\"/\n\007AddData\022\021\n\taudioData\030\001 \001(\014\022\021\n"
    "\tlastChunk\030\002 \002(\010\")\n\004Word\022\022\n\nconfidence\030\001"
    " \002(\002\022\r\n\005value\030\002 \002(\t\"Y\n\006Result\022\022\n\nconfide"
    "nce\030\001 \002(\002\022\'\n\005words\030\002 \003(\0132\030.VoiceProxyPro"
    "tobuf.Word\022\022\n\nnormalized\030\003 \001(\t\"\273\001\n\017AddDa"
    "taResponse\022D\n\014responseCode\030\001 \002(\0162..Basic"
    "Protobuf.ConnectionResponse.ResponseCode"
    "\022/\n\013recognition\030\002 \003(\0132\032.VoiceProxyProtob"
    "uf.Result\022\027\n\010endOfUtt\030\003 \001(\010:\005false\022\030\n\rme"
    "ssagesCount\030\004 \001(\005:\0011", 700);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "voiceproxy.proto", &protobuf_RegisterTypes);
  ConnectionRequest::default_instance_ = new ConnectionRequest();
  AddData::default_instance_ = new AddData();
  Word::default_instance_ = new Word();
  Result::default_instance_ = new Result();
  AddDataResponse::default_instance_ = new AddDataResponse();
  ConnectionRequest::default_instance_->InitAsDefaultInstance();
  AddData::default_instance_->InitAsDefaultInstance();
  Word::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  AddDataResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_voiceproxy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_voiceproxy_2eproto {
  StaticDescriptorInitializer_voiceproxy_2eproto() {
    protobuf_AddDesc_voiceproxy_2eproto();
  }
} static_descriptor_initializer_voiceproxy_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ConnectionRequest::kProtocolVersionFieldNumber;
const int ConnectionRequest::kSpeechkitVersionFieldNumber;
const int ConnectionRequest::kServiceNameFieldNumber;
const int ConnectionRequest::kUuidFieldNumber;
const int ConnectionRequest::kApiKeyFieldNumber;
const int ConnectionRequest::kApplicationNameFieldNumber;
const int ConnectionRequest::kDeviceFieldNumber;
const int ConnectionRequest::kCoordsFieldNumber;
const int ConnectionRequest::kTopicFieldNumber;
const int ConnectionRequest::kLangFieldNumber;
const int ConnectionRequest::kFormatFieldNumber;
const int ConnectionRequest::kPunctuationFieldNumber;
const int ConnectionRequest::kDeviceNameFieldNumber;
#endif  // !_MSC_VER

ConnectionRequest::ConnectionRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.ConnectionRequest)
}

void ConnectionRequest::InitAsDefaultInstance() {
}

ConnectionRequest::ConnectionRequest(const ConnectionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.ConnectionRequest)
}

void ConnectionRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  protocolversion_ = 1;
  speechkitversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apikey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicationname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  punctuation_ = true;
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionRequest::~ConnectionRequest() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.ConnectionRequest)
  SharedDtor();
}

void ConnectionRequest::SharedDtor() {
  speechkitversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apikey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicationname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coords_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionRequest_descriptor_;
}

const ConnectionRequest& ConnectionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

ConnectionRequest* ConnectionRequest::default_instance_ = NULL;

ConnectionRequest* ConnectionRequest::New(::google::protobuf::Arena* arena) const {
  ConnectionRequest* n = new ConnectionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionRequest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    protocolversion_ = 1;
    if (has_speechkitversion()) {
      speechkitversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_servicename()) {
      servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uuid()) {
      uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_apikey()) {
      apikey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_applicationname()) {
      applicationname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_device()) {
      device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_coords()) {
      coords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_topic()) {
      topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_lang()) {
      lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_format()) {
      format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    punctuation_ = true;
    if (has_devicename()) {
      devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConnectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.ConnectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 protocolVersion = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
          set_has_protocolversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_speechkitVersion;
        break;
      }

      // required string speechkitVersion = 2;
      case 2: {
        if (tag == 18) {
         parse_speechkitVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speechkitversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->speechkitversion().data(), this->speechkitversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.speechkitVersion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_serviceName;
        break;
      }

      // required string serviceName = 3;
      case 3: {
        if (tag == 26) {
         parse_serviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servicename().data(), this->servicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.serviceName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // required string uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_apiKey;
        break;
      }

      // required string apiKey = 5;
      case 5: {
        if (tag == 42) {
         parse_apiKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apikey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apikey().data(), this->apikey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.apiKey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_applicationName;
        break;
      }

      // required string applicationName = 6;
      case 6: {
        if (tag == 50) {
         parse_applicationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->applicationname().data(), this->applicationname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.applicationName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_device;
        break;
      }

      // required string device = 7;
      case 7: {
        if (tag == 58) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_coords;
        break;
      }

      // required string coords = 8;
      case 8: {
        if (tag == 66) {
         parse_coords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coords().data(), this->coords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.coords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_topic;
        break;
      }

      // required string topic = 9;
      case 9: {
        if (tag == 74) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_lang;
        break;
      }

      // required string lang = 10;
      case 10: {
        if (tag == 82) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.lang");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_format;
        break;
      }

      // required string format = 11;
      case 11: {
        if (tag == 90) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_punctuation;
        break;
      }

      // optional bool punctuation = 12 [default = true];
      case 12: {
        if (tag == 96) {
         parse_punctuation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &punctuation_)));
          set_has_punctuation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_deviceName;
        break;
      }

      // optional string deviceName = 13;
      case 13: {
        if (tag == 106) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.ConnectionRequest.deviceName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.ConnectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.ConnectionRequest)
  return false;
#undef DO_
}

void ConnectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.ConnectionRequest)
  // optional int32 protocolVersion = 1 [default = 1];
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // required string speechkitVersion = 2;
  if (has_speechkitversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speechkitversion().data(), this->speechkitversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.speechkitVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->speechkitversion(), output);
  }

  // required string serviceName = 3;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.serviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->servicename(), output);
  }

  // required string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // required string apiKey = 5;
  if (has_apikey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apikey().data(), this->apikey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.apiKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->apikey(), output);
  }

  // required string applicationName = 6;
  if (has_applicationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applicationname().data(), this->applicationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.applicationName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->applicationname(), output);
  }

  // required string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device(), output);
  }

  // required string coords = 8;
  if (has_coords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coords().data(), this->coords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.coords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->coords(), output);
  }

  // required string topic = 9;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->topic(), output);
  }

  // required string lang = 10;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->lang(), output);
  }

  // required string format = 11;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->format(), output);
  }

  // optional bool punctuation = 12 [default = true];
  if (has_punctuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->punctuation(), output);
  }

  // optional string deviceName = 13;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->devicename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.ConnectionRequest)
}

::google::protobuf::uint8* ConnectionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.ConnectionRequest)
  // optional int32 protocolVersion = 1 [default = 1];
  if (has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // required string speechkitVersion = 2;
  if (has_speechkitversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speechkitversion().data(), this->speechkitversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.speechkitVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->speechkitversion(), target);
  }

  // required string serviceName = 3;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.serviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servicename(), target);
  }

  // required string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // required string apiKey = 5;
  if (has_apikey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apikey().data(), this->apikey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.apiKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->apikey(), target);
  }

  // required string applicationName = 6;
  if (has_applicationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applicationname().data(), this->applicationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.applicationName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->applicationname(), target);
  }

  // required string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device(), target);
  }

  // required string coords = 8;
  if (has_coords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coords().data(), this->coords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.coords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->coords(), target);
  }

  // required string topic = 9;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->topic(), target);
  }

  // required string lang = 10;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lang(), target);
  }

  // required string format = 11;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->format(), target);
  }

  // optional bool punctuation = 12 [default = true];
  if (has_punctuation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->punctuation(), target);
  }

  // optional string deviceName = 13;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.ConnectionRequest.deviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->devicename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.ConnectionRequest)
  return target;
}

int ConnectionRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_speechkitversion()) {
    // required string speechkitVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->speechkitversion());
  }

  if (has_servicename()) {
    // required string serviceName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servicename());
  }

  if (has_uuid()) {
    // required string uuid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  if (has_apikey()) {
    // required string apiKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->apikey());
  }

  if (has_applicationname()) {
    // required string applicationName = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->applicationname());
  }

  if (has_device()) {
    // required string device = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  if (has_coords()) {
    // required string coords = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coords());
  }

  if (has_topic()) {
    // required string topic = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  if (has_lang()) {
    // required string lang = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  if (has_format()) {
    // required string format = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  return total_size;
}
int ConnectionRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000007fe) ^ 0x000007fe) == 0) {  // All required fields are present.
    // required string speechkitVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->speechkitversion());

    // required string serviceName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servicename());

    // required string uuid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());

    // required string apiKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->apikey());

    // required string applicationName = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->applicationname());

    // required string device = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());

    // required string coords = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coords());

    // required string topic = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());

    // required string lang = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());

    // required string format = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 protocolVersion = 1 [default = 1];
  if (has_protocolversion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->protocolversion());
  }

  if (_has_bits_[11 / 32] & 6144) {
    // optional bool punctuation = 12 [default = true];
    if (has_punctuation()) {
      total_size += 1 + 1;
    }

    // optional string deviceName = 13;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionRequest::MergeFrom(const ConnectionRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_speechkitversion()) {
      set_has_speechkitversion();
      speechkitversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.speechkitversion_);
    }
    if (from.has_servicename()) {
      set_has_servicename();
      servicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servicename_);
    }
    if (from.has_uuid()) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (from.has_apikey()) {
      set_has_apikey();
      apikey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apikey_);
    }
    if (from.has_applicationname()) {
      set_has_applicationname();
      applicationname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.applicationname_);
    }
    if (from.has_device()) {
      set_has_device();
      device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
    if (from.has_coords()) {
      set_has_coords();
      coords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coords_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_topic()) {
      set_has_topic();
      topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (from.has_lang()) {
      set_has_lang();
      lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
    }
    if (from.has_format()) {
      set_has_format();
      format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
    }
    if (from.has_punctuation()) {
      set_punctuation(from.punctuation());
    }
    if (from.has_devicename()) {
      set_has_devicename();
      devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConnectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionRequest::CopyFrom(const ConnectionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007fe) != 0x000007fe) return false;

  return true;
}

void ConnectionRequest::Swap(ConnectionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionRequest::InternalSwap(ConnectionRequest* other) {
  std::swap(protocolversion_, other->protocolversion_);
  speechkitversion_.Swap(&other->speechkitversion_);
  servicename_.Swap(&other->servicename_);
  uuid_.Swap(&other->uuid_);
  apikey_.Swap(&other->apikey_);
  applicationname_.Swap(&other->applicationname_);
  device_.Swap(&other->device_);
  coords_.Swap(&other->coords_);
  topic_.Swap(&other->topic_);
  lang_.Swap(&other->lang_);
  format_.Swap(&other->format_);
  std::swap(punctuation_, other->punctuation_);
  devicename_.Swap(&other->devicename_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionRequest_descriptor_;
  metadata.reflection = ConnectionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectionRequest

// optional int32 protocolVersion = 1 [default = 1];
 bool ConnectionRequest::has_protocolversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void ConnectionRequest::set_has_protocolversion() {
  _has_bits_[0] |= 0x00000001u;
}
 void ConnectionRequest::clear_has_protocolversion() {
  _has_bits_[0] &= ~0x00000001u;
}
 void ConnectionRequest::clear_protocolversion() {
  protocolversion_ = 1;
  clear_has_protocolversion();
}
 ::google::protobuf::int32 ConnectionRequest::protocolversion() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.protocolVersion)
  return protocolversion_;
}
 void ConnectionRequest::set_protocolversion(::google::protobuf::int32 value) {
  set_has_protocolversion();
  protocolversion_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.protocolVersion)
}

// required string speechkitVersion = 2;
 bool ConnectionRequest::has_speechkitversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void ConnectionRequest::set_has_speechkitversion() {
  _has_bits_[0] |= 0x00000002u;
}
 void ConnectionRequest::clear_has_speechkitversion() {
  _has_bits_[0] &= ~0x00000002u;
}
 void ConnectionRequest::clear_speechkitversion() {
  speechkitversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_speechkitversion();
}
 const ::std::string& ConnectionRequest::speechkitversion() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
  return speechkitversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_speechkitversion(const ::std::string& value) {
  set_has_speechkitversion();
  speechkitversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}
 void ConnectionRequest::set_speechkitversion(const char* value) {
  set_has_speechkitversion();
  speechkitversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}
 void ConnectionRequest::set_speechkitversion(const char* value, size_t size) {
  set_has_speechkitversion();
  speechkitversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}
 ::std::string* ConnectionRequest::mutable_speechkitversion() {
  set_has_speechkitversion();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
  return speechkitversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_speechkitversion() {
  clear_has_speechkitversion();
  return speechkitversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_speechkitversion(::std::string* speechkitversion) {
  if (speechkitversion != NULL) {
    set_has_speechkitversion();
  } else {
    clear_has_speechkitversion();
  }
  speechkitversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), speechkitversion);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}

// required string serviceName = 3;
 bool ConnectionRequest::has_servicename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void ConnectionRequest::set_has_servicename() {
  _has_bits_[0] |= 0x00000004u;
}
 void ConnectionRequest::clear_has_servicename() {
  _has_bits_[0] &= ~0x00000004u;
}
 void ConnectionRequest::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_servicename();
}
 const ::std::string& ConnectionRequest::servicename() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.serviceName)
  return servicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_servicename(const ::std::string& value) {
  set_has_servicename();
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}
 void ConnectionRequest::set_servicename(const char* value) {
  set_has_servicename();
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}
 void ConnectionRequest::set_servicename(const char* value, size_t size) {
  set_has_servicename();
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}
 ::std::string* ConnectionRequest::mutable_servicename() {
  set_has_servicename();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_servicename() {
  clear_has_servicename();
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    set_has_servicename();
  } else {
    clear_has_servicename();
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}

// required string uuid = 4;
 bool ConnectionRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void ConnectionRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
 void ConnectionRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
 void ConnectionRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
 const ::std::string& ConnectionRequest::uuid() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.uuid)
}
 void ConnectionRequest::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.uuid)
}
 void ConnectionRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.uuid)
}
 ::std::string* ConnectionRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_uuid() {
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.uuid)
}

// required string apiKey = 5;
 bool ConnectionRequest::has_apikey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
 void ConnectionRequest::set_has_apikey() {
  _has_bits_[0] |= 0x00000010u;
}
 void ConnectionRequest::clear_has_apikey() {
  _has_bits_[0] &= ~0x00000010u;
}
 void ConnectionRequest::clear_apikey() {
  apikey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_apikey();
}
 const ::std::string& ConnectionRequest::apikey() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.apiKey)
  return apikey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_apikey(const ::std::string& value) {
  set_has_apikey();
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}
 void ConnectionRequest::set_apikey(const char* value) {
  set_has_apikey();
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}
 void ConnectionRequest::set_apikey(const char* value, size_t size) {
  set_has_apikey();
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}
 ::std::string* ConnectionRequest::mutable_apikey() {
  set_has_apikey();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.apiKey)
  return apikey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_apikey() {
  clear_has_apikey();
  return apikey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_apikey(::std::string* apikey) {
  if (apikey != NULL) {
    set_has_apikey();
  } else {
    clear_has_apikey();
  }
  apikey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apikey);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}

// required string applicationName = 6;
 bool ConnectionRequest::has_applicationname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
 void ConnectionRequest::set_has_applicationname() {
  _has_bits_[0] |= 0x00000020u;
}
 void ConnectionRequest::clear_has_applicationname() {
  _has_bits_[0] &= ~0x00000020u;
}
 void ConnectionRequest::clear_applicationname() {
  applicationname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applicationname();
}
 const ::std::string& ConnectionRequest::applicationname() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.applicationName)
  return applicationname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_applicationname(const ::std::string& value) {
  set_has_applicationname();
  applicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}
 void ConnectionRequest::set_applicationname(const char* value) {
  set_has_applicationname();
  applicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}
 void ConnectionRequest::set_applicationname(const char* value, size_t size) {
  set_has_applicationname();
  applicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}
 ::std::string* ConnectionRequest::mutable_applicationname() {
  set_has_applicationname();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.applicationName)
  return applicationname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_applicationname() {
  clear_has_applicationname();
  return applicationname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_applicationname(::std::string* applicationname) {
  if (applicationname != NULL) {
    set_has_applicationname();
  } else {
    clear_has_applicationname();
  }
  applicationname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applicationname);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}

// required string device = 7;
 bool ConnectionRequest::has_device() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
 void ConnectionRequest::set_has_device() {
  _has_bits_[0] |= 0x00000040u;
}
 void ConnectionRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000040u;
}
 void ConnectionRequest::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device();
}
 const ::std::string& ConnectionRequest::device() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.device)
  return device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_device(const ::std::string& value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.device)
}
 void ConnectionRequest::set_device(const char* value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.device)
}
 void ConnectionRequest::set_device(const char* value, size_t size) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.device)
}
 ::std::string* ConnectionRequest::mutable_device() {
  set_has_device();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_device() {
  clear_has_device();
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    set_has_device();
  } else {
    clear_has_device();
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.device)
}

// required string coords = 8;
 bool ConnectionRequest::has_coords() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
 void ConnectionRequest::set_has_coords() {
  _has_bits_[0] |= 0x00000080u;
}
 void ConnectionRequest::clear_has_coords() {
  _has_bits_[0] &= ~0x00000080u;
}
 void ConnectionRequest::clear_coords() {
  coords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_coords();
}
 const ::std::string& ConnectionRequest::coords() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.coords)
  return coords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_coords(const ::std::string& value) {
  set_has_coords();
  coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.coords)
}
 void ConnectionRequest::set_coords(const char* value) {
  set_has_coords();
  coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.coords)
}
 void ConnectionRequest::set_coords(const char* value, size_t size) {
  set_has_coords();
  coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.coords)
}
 ::std::string* ConnectionRequest::mutable_coords() {
  set_has_coords();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.coords)
  return coords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_coords() {
  clear_has_coords();
  return coords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_coords(::std::string* coords) {
  if (coords != NULL) {
    set_has_coords();
  } else {
    clear_has_coords();
  }
  coords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coords);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.coords)
}

// required string topic = 9;
 bool ConnectionRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
 void ConnectionRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000100u;
}
 void ConnectionRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000100u;
}
 void ConnectionRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
 const ::std::string& ConnectionRequest::topic() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.topic)
}
 void ConnectionRequest::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.topic)
}
 void ConnectionRequest::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.topic)
}
 ::std::string* ConnectionRequest::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_topic() {
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.topic)
}

// required string lang = 10;
 bool ConnectionRequest::has_lang() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
 void ConnectionRequest::set_has_lang() {
  _has_bits_[0] |= 0x00000200u;
}
 void ConnectionRequest::clear_has_lang() {
  _has_bits_[0] &= ~0x00000200u;
}
 void ConnectionRequest::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lang();
}
 const ::std::string& ConnectionRequest::lang() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_lang(const ::std::string& value) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.lang)
}
 void ConnectionRequest::set_lang(const char* value) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.lang)
}
 void ConnectionRequest::set_lang(const char* value, size_t size) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.lang)
}
 ::std::string* ConnectionRequest::mutable_lang() {
  set_has_lang();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_lang() {
  clear_has_lang();
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    set_has_lang();
  } else {
    clear_has_lang();
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.lang)
}

// required string format = 11;
 bool ConnectionRequest::has_format() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
 void ConnectionRequest::set_has_format() {
  _has_bits_[0] |= 0x00000400u;
}
 void ConnectionRequest::clear_has_format() {
  _has_bits_[0] &= ~0x00000400u;
}
 void ConnectionRequest::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_format();
}
 const ::std::string& ConnectionRequest::format() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.format)
  return format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_format(const ::std::string& value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.format)
}
 void ConnectionRequest::set_format(const char* value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.format)
}
 void ConnectionRequest::set_format(const char* value, size_t size) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.format)
}
 ::std::string* ConnectionRequest::mutable_format() {
  set_has_format();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_format() {
  clear_has_format();
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    set_has_format();
  } else {
    clear_has_format();
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.format)
}

// optional bool punctuation = 12 [default = true];
 bool ConnectionRequest::has_punctuation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
 void ConnectionRequest::set_has_punctuation() {
  _has_bits_[0] |= 0x00000800u;
}
 void ConnectionRequest::clear_has_punctuation() {
  _has_bits_[0] &= ~0x00000800u;
}
 void ConnectionRequest::clear_punctuation() {
  punctuation_ = true;
  clear_has_punctuation();
}
 bool ConnectionRequest::punctuation() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.punctuation)
  return punctuation_;
}
 void ConnectionRequest::set_punctuation(bool value) {
  set_has_punctuation();
  punctuation_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.punctuation)
}

// optional string deviceName = 13;
 bool ConnectionRequest::has_devicename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
 void ConnectionRequest::set_has_devicename() {
  _has_bits_[0] |= 0x00001000u;
}
 void ConnectionRequest::clear_has_devicename() {
  _has_bits_[0] &= ~0x00001000u;
}
 void ConnectionRequest::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
 const ::std::string& ConnectionRequest::devicename() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.deviceName)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.deviceName)
}
 void ConnectionRequest::set_devicename(const char* value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.deviceName)
}
 void ConnectionRequest::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.deviceName)
}
 ::std::string* ConnectionRequest::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnectionRequest::release_devicename() {
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnectionRequest::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.deviceName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AddData::kAudioDataFieldNumber;
const int AddData::kLastChunkFieldNumber;
#endif  // !_MSC_VER

AddData::AddData()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.AddData)
}

void AddData::InitAsDefaultInstance() {
}

AddData::AddData(const AddData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.AddData)
}

void AddData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  audiodata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastchunk_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddData::~AddData() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.AddData)
  SharedDtor();
}

void AddData::SharedDtor() {
  audiodata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AddData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddData_descriptor_;
}

const AddData& AddData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

AddData* AddData::default_instance_ = NULL;

AddData* AddData::New(::google::protobuf::Arena* arena) const {
  AddData* n = new AddData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_audiodata()) {
      audiodata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    lastchunk_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AddData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.AddData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes audioData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audiodata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lastChunk;
        break;
      }

      // required bool lastChunk = 2;
      case 2: {
        if (tag == 16) {
         parse_lastChunk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastchunk_)));
          set_has_lastchunk();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.AddData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.AddData)
  return false;
#undef DO_
}

void AddData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.AddData)
  // optional bytes audioData = 1;
  if (has_audiodata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->audiodata(), output);
  }

  // required bool lastChunk = 2;
  if (has_lastchunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->lastchunk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.AddData)
}

::google::protobuf::uint8* AddData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.AddData)
  // optional bytes audioData = 1;
  if (has_audiodata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->audiodata(), target);
  }

  // required bool lastChunk = 2;
  if (has_lastchunk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->lastchunk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.AddData)
  return target;
}

int AddData::ByteSize() const {
  int total_size = 0;

  // required bool lastChunk = 2;
  if (has_lastchunk()) {
    total_size += 1 + 1;
  }
  // optional bytes audioData = 1;
  if (has_audiodata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->audiodata());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddData::MergeFrom(const AddData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_audiodata()) {
      set_has_audiodata();
      audiodata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.audiodata_);
    }
    if (from.has_lastchunk()) {
      set_lastchunk(from.lastchunk());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AddData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddData::CopyFrom(const AddData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void AddData::Swap(AddData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddData::InternalSwap(AddData* other) {
  audiodata_.Swap(&other->audiodata_);
  std::swap(lastchunk_, other->lastchunk_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddData_descriptor_;
  metadata.reflection = AddData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddData

// optional bytes audioData = 1;
 bool AddData::has_audiodata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void AddData::set_has_audiodata() {
  _has_bits_[0] |= 0x00000001u;
}
 void AddData::clear_has_audiodata() {
  _has_bits_[0] &= ~0x00000001u;
}
 void AddData::clear_audiodata() {
  audiodata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audiodata();
}
 const ::std::string& AddData::audiodata() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddData.audioData)
  return audiodata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddData::set_audiodata(const ::std::string& value) {
  set_has_audiodata();
  audiodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddData.audioData)
}
 void AddData::set_audiodata(const char* value) {
  set_has_audiodata();
  audiodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.AddData.audioData)
}
 void AddData::set_audiodata(const void* value, size_t size) {
  set_has_audiodata();
  audiodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.AddData.audioData)
}
 ::std::string* AddData::mutable_audiodata() {
  set_has_audiodata();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AddData.audioData)
  return audiodata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AddData::release_audiodata() {
  clear_has_audiodata();
  return audiodata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AddData::set_allocated_audiodata(::std::string* audiodata) {
  if (audiodata != NULL) {
    set_has_audiodata();
  } else {
    clear_has_audiodata();
  }
  audiodata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audiodata);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.AddData.audioData)
}

// required bool lastChunk = 2;
 bool AddData::has_lastchunk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void AddData::set_has_lastchunk() {
  _has_bits_[0] |= 0x00000002u;
}
 void AddData::clear_has_lastchunk() {
  _has_bits_[0] &= ~0x00000002u;
}
 void AddData::clear_lastchunk() {
  lastchunk_ = false;
  clear_has_lastchunk();
}
 bool AddData::lastchunk() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddData.lastChunk)
  return lastchunk_;
}
 void AddData::set_lastchunk(bool value) {
  set_has_lastchunk();
  lastchunk_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddData.lastChunk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Word::kConfidenceFieldNumber;
const int Word::kValueFieldNumber;
#endif  // !_MSC_VER

Word::Word()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.Word)
}

void Word::InitAsDefaultInstance() {
}

Word::Word(const Word& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.Word)
}

void Word::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confidence_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Word::~Word() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.Word)
  SharedDtor();
}

void Word::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Word::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Word::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Word_descriptor_;
}

const Word& Word::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

Word* Word::default_instance_ = NULL;

Word* Word::New(::google::protobuf::Arena* arena) const {
  Word* n = new Word;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Word::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    confidence_ = 0;
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Word::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.Word)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float confidence = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.Word.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.Word)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.Word)
  return false;
#undef DO_
}

void Word::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.Word)
  // required float confidence = 1;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.Word.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.Word)
}

::google::protobuf::uint8* Word::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.Word)
  // required float confidence = 1;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.Word.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.Word)
  return target;
}

int Word::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_confidence()) {
    // required float confidence = 1;
    total_size += 1 + 4;
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int Word::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float confidence = 1;
    total_size += 1 + 4;

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Word::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Word* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Word*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Word::MergeFrom(const Word& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Word::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Word::CopyFrom(const Word& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Word::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Word::Swap(Word* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Word::InternalSwap(Word* other) {
  std::swap(confidence_, other->confidence_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Word::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Word_descriptor_;
  metadata.reflection = Word_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Word

// required float confidence = 1;
 bool Word::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Word::set_has_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
 void Word::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Word::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
 float Word::confidence() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Word.confidence)
  return confidence_;
}
 void Word::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Word.confidence)
}

// required string value = 2;
 bool Word::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Word::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
 void Word::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Word::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Word::value() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Word.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Word::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Word.value)
}
 void Word::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.Word.value)
}
 void Word::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.Word.value)
}
 ::std::string* Word::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Word.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Word::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Word::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.Word.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Result::kConfidenceFieldNumber;
const int Result::kWordsFieldNumber;
const int Result::kNormalizedFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.Result)
}

void Result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confidence_ = 0;
  normalized_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  normalized_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    confidence_ = 0;
    if (has_normalized()) {
      normalized_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  words_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float confidence = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_words;
        break;
      }

      // repeated .VoiceProxyProtobuf.Word words = 2;
      case 2: {
        if (tag == 18) {
         parse_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_words()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_words;
        if (input->ExpectTag(26)) goto parse_normalized;
        break;
      }

      // optional string normalized = 3;
      case 3: {
        if (tag == 26) {
         parse_normalized:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalized()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->normalized().data(), this->normalized().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "VoiceProxyProtobuf.Result.normalized");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.Result)
  // required float confidence = 1;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // repeated .VoiceProxyProtobuf.Word words = 2;
  for (unsigned int i = 0, n = this->words_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->words(i), output);
  }

  // optional string normalized = 3;
  if (has_normalized()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normalized().data(), this->normalized().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.Result.normalized");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->normalized(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.Result)
  // required float confidence = 1;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // repeated .VoiceProxyProtobuf.Word words = 2;
  for (unsigned int i = 0, n = this->words_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->words(i), target);
  }

  // optional string normalized = 3;
  if (has_normalized()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->normalized().data(), this->normalized().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "VoiceProxyProtobuf.Result.normalized");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->normalized(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  // required float confidence = 1;
  if (has_confidence()) {
    total_size += 1 + 4;
  }
  // optional string normalized = 3;
  if (has_normalized()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normalized());
  }

  // repeated .VoiceProxyProtobuf.Word words = 2;
  total_size += 1 * this->words_size();
  for (int i = 0; i < this->words_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->words(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  words_.MergeFrom(from.words_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_normalized()) {
      set_has_normalized();
      normalized_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normalized_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->words())) return false;
  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(confidence_, other->confidence_);
  words_.UnsafeArenaSwap(&other->words_);
  normalized_.Swap(&other->normalized_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result

// required float confidence = 1;
 bool Result::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Result::set_has_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
 void Result::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Result::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
 float Result::confidence() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Result.confidence)
  return confidence_;
}
 void Result::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Result.confidence)
}

// repeated .VoiceProxyProtobuf.Word words = 2;
 int Result::words_size() const {
  return words_.size();
}
 void Result::clear_words() {
  words_.Clear();
}
 const ::VoiceProxyProtobuf::Word& Result::words(int index) const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Result.words)
  return words_.Get(index);
}
 ::VoiceProxyProtobuf::Word* Result::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Result.words)
  return words_.Mutable(index);
}
 ::VoiceProxyProtobuf::Word* Result::add_words() {
  // @@protoc_insertion_point(field_add:VoiceProxyProtobuf.Result.words)
  return words_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word >&
Result::words() const {
  // @@protoc_insertion_point(field_list:VoiceProxyProtobuf.Result.words)
  return words_;
}
 ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word >*
Result::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:VoiceProxyProtobuf.Result.words)
  return &words_;
}

// optional string normalized = 3;
 bool Result::has_normalized() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Result::set_has_normalized() {
  _has_bits_[0] |= 0x00000004u;
}
 void Result::clear_has_normalized() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Result::clear_normalized() {
  normalized_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_normalized();
}
 const ::std::string& Result::normalized() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Result.normalized)
  return normalized_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_normalized(const ::std::string& value) {
  set_has_normalized();
  normalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Result.normalized)
}
 void Result::set_normalized(const char* value) {
  set_has_normalized();
  normalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.Result.normalized)
}
 void Result::set_normalized(const char* value, size_t size) {
  set_has_normalized();
  normalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.Result.normalized)
}
 ::std::string* Result::mutable_normalized() {
  set_has_normalized();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Result.normalized)
  return normalized_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_normalized() {
  clear_has_normalized();
  return normalized_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_normalized(::std::string* normalized) {
  if (normalized != NULL) {
    set_has_normalized();
  } else {
    clear_has_normalized();
  }
  normalized_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normalized);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.Result.normalized)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AddDataResponse::kResponseCodeFieldNumber;
const int AddDataResponse::kRecognitionFieldNumber;
const int AddDataResponse::kEndOfUttFieldNumber;
const int AddDataResponse::kMessagesCountFieldNumber;
#endif  // !_MSC_VER

AddDataResponse::AddDataResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VoiceProxyProtobuf.AddDataResponse)
}

void AddDataResponse::InitAsDefaultInstance() {
}

AddDataResponse::AddDataResponse(const AddDataResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VoiceProxyProtobuf.AddDataResponse)
}

void AddDataResponse::SharedCtor() {
  _cached_size_ = 0;
  responsecode_ = 200;
  endofutt_ = false;
  messagescount_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddDataResponse::~AddDataResponse() {
  // @@protoc_insertion_point(destructor:VoiceProxyProtobuf.AddDataResponse)
  SharedDtor();
}

void AddDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddDataResponse_descriptor_;
}

const AddDataResponse& AddDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_voiceproxy_2eproto();
  return *default_instance_;
}

AddDataResponse* AddDataResponse::default_instance_ = NULL;

AddDataResponse* AddDataResponse::New(::google::protobuf::Arena* arena) const {
  AddDataResponse* n = new AddDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddDataResponse::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    responsecode_ = 200;
    endofutt_ = false;
    messagescount_ = 1;
  }
  recognition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AddDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VoiceProxyProtobuf.AddDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BasicProtobuf::ConnectionResponse_ResponseCode_IsValid(value)) {
            set_responsecode(static_cast< ::BasicProtobuf::ConnectionResponse_ResponseCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recognition;
        break;
      }

      // repeated .VoiceProxyProtobuf.Result recognition = 2;
      case 2: {
        if (tag == 18) {
         parse_recognition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recognition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recognition;
        if (input->ExpectTag(24)) goto parse_endOfUtt;
        break;
      }

      // optional bool endOfUtt = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_endOfUtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endofutt_)));
          set_has_endofutt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_messagesCount;
        break;
      }

      // optional int32 messagesCount = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_messagesCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messagescount_)));
          set_has_messagescount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VoiceProxyProtobuf.AddDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VoiceProxyProtobuf.AddDataResponse)
  return false;
#undef DO_
}

void AddDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VoiceProxyProtobuf.AddDataResponse)
  // required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
  if (has_responsecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->responsecode(), output);
  }

  // repeated .VoiceProxyProtobuf.Result recognition = 2;
  for (unsigned int i = 0, n = this->recognition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recognition(i), output);
  }

  // optional bool endOfUtt = 3 [default = false];
  if (has_endofutt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->endofutt(), output);
  }

  // optional int32 messagesCount = 4 [default = 1];
  if (has_messagescount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->messagescount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VoiceProxyProtobuf.AddDataResponse)
}

::google::protobuf::uint8* AddDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VoiceProxyProtobuf.AddDataResponse)
  // required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
  if (has_responsecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->responsecode(), target);
  }

  // repeated .VoiceProxyProtobuf.Result recognition = 2;
  for (unsigned int i = 0, n = this->recognition_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recognition(i), target);
  }

  // optional bool endOfUtt = 3 [default = false];
  if (has_endofutt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->endofutt(), target);
  }

  // optional int32 messagesCount = 4 [default = 1];
  if (has_messagescount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->messagescount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VoiceProxyProtobuf.AddDataResponse)
  return target;
}

int AddDataResponse::ByteSize() const {
  int total_size = 0;

  // required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
  if (has_responsecode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->responsecode());
  }
  if (_has_bits_[2 / 32] & 12) {
    // optional bool endOfUtt = 3 [default = false];
    if (has_endofutt()) {
      total_size += 1 + 1;
    }

    // optional int32 messagesCount = 4 [default = 1];
    if (has_messagescount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messagescount());
    }

  }
  // repeated .VoiceProxyProtobuf.Result recognition = 2;
  total_size += 1 * this->recognition_size();
  for (int i = 0; i < this->recognition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recognition(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddDataResponse::MergeFrom(const AddDataResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  recognition_.MergeFrom(from.recognition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsecode()) {
      set_responsecode(from.responsecode());
    }
    if (from.has_endofutt()) {
      set_endofutt(from.endofutt());
    }
    if (from.has_messagescount()) {
      set_messagescount(from.messagescount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AddDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDataResponse::CopyFrom(const AddDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->recognition())) return false;
  return true;
}

void AddDataResponse::Swap(AddDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddDataResponse::InternalSwap(AddDataResponse* other) {
  std::swap(responsecode_, other->responsecode_);
  recognition_.UnsafeArenaSwap(&other->recognition_);
  std::swap(endofutt_, other->endofutt_);
  std::swap(messagescount_, other->messagescount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddDataResponse_descriptor_;
  metadata.reflection = AddDataResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddDataResponse

// required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
 bool AddDataResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void AddDataResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
 void AddDataResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
 void AddDataResponse::clear_responsecode() {
  responsecode_ = 200;
  clear_has_responsecode();
}
 ::BasicProtobuf::ConnectionResponse_ResponseCode AddDataResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.responseCode)
  return static_cast< ::BasicProtobuf::ConnectionResponse_ResponseCode >(responsecode_);
}
 void AddDataResponse::set_responsecode(::BasicProtobuf::ConnectionResponse_ResponseCode value) {
  assert(::BasicProtobuf::ConnectionResponse_ResponseCode_IsValid(value));
  set_has_responsecode();
  responsecode_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddDataResponse.responseCode)
}

// repeated .VoiceProxyProtobuf.Result recognition = 2;
 int AddDataResponse::recognition_size() const {
  return recognition_.size();
}
 void AddDataResponse::clear_recognition() {
  recognition_.Clear();
}
 const ::VoiceProxyProtobuf::Result& AddDataResponse::recognition(int index) const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_.Get(index);
}
 ::VoiceProxyProtobuf::Result* AddDataResponse::mutable_recognition(int index) {
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_.Mutable(index);
}
 ::VoiceProxyProtobuf::Result* AddDataResponse::add_recognition() {
  // @@protoc_insertion_point(field_add:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result >&
AddDataResponse::recognition() const {
  // @@protoc_insertion_point(field_list:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_;
}
 ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result >*
AddDataResponse::mutable_recognition() {
  // @@protoc_insertion_point(field_mutable_list:VoiceProxyProtobuf.AddDataResponse.recognition)
  return &recognition_;
}

// optional bool endOfUtt = 3 [default = false];
 bool AddDataResponse::has_endofutt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void AddDataResponse::set_has_endofutt() {
  _has_bits_[0] |= 0x00000004u;
}
 void AddDataResponse::clear_has_endofutt() {
  _has_bits_[0] &= ~0x00000004u;
}
 void AddDataResponse::clear_endofutt() {
  endofutt_ = false;
  clear_has_endofutt();
}
 bool AddDataResponse::endofutt() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.endOfUtt)
  return endofutt_;
}
 void AddDataResponse::set_endofutt(bool value) {
  set_has_endofutt();
  endofutt_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddDataResponse.endOfUtt)
}

// optional int32 messagesCount = 4 [default = 1];
 bool AddDataResponse::has_messagescount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void AddDataResponse::set_has_messagescount() {
  _has_bits_[0] |= 0x00000008u;
}
 void AddDataResponse::clear_has_messagescount() {
  _has_bits_[0] &= ~0x00000008u;
}
 void AddDataResponse::clear_messagescount() {
  messagescount_ = 1;
  clear_has_messagescount();
}
 ::google::protobuf::int32 AddDataResponse::messagescount() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.messagesCount)
  return messagescount_;
}
 void AddDataResponse::set_messagescount(::google::protobuf::int32 value) {
  set_has_messagescount();
  messagescount_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddDataResponse.messagesCount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace VoiceProxyProtobuf

// @@protoc_insertion_point(global_scope)
