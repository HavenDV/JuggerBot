// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voiceproxy.proto

#ifndef PROTOBUF_voiceproxy_2eproto__INCLUDED
#define PROTOBUF_voiceproxy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
// @@protoc_insertion_point(includes)

namespace VoiceProxyProtobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_voiceproxy_2eproto();
void protobuf_AssignDesc_voiceproxy_2eproto();
void protobuf_ShutdownFile_voiceproxy_2eproto();

class ConnectionRequest;
class AddData;
class Word;
class Result;
class AddDataResponse;

// ===================================================================

class ConnectionRequest : public ::google::protobuf::Message {
 public:
  ConnectionRequest();
  virtual ~ConnectionRequest();

  ConnectionRequest(const ConnectionRequest& from);

  inline ConnectionRequest& operator=(const ConnectionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionRequest& default_instance();

  void Swap(ConnectionRequest* other);

  // implements Message ----------------------------------------------

  inline ConnectionRequest* New() const { return New(NULL); }

  ConnectionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectionRequest& from);
  void MergeFrom(const ConnectionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 protocolVersion = 1 [default = 1];
  bool has_protocolversion() const;
  void clear_protocolversion();
  static const int kProtocolVersionFieldNumber = 1;
  ::google::protobuf::int32 protocolversion() const;
  void set_protocolversion(::google::protobuf::int32 value);

  // required string speechkitVersion = 2;
  bool has_speechkitversion() const;
  void clear_speechkitversion();
  static const int kSpeechkitVersionFieldNumber = 2;
  const ::std::string& speechkitversion() const;
  void set_speechkitversion(const ::std::string& value);
  void set_speechkitversion(const char* value);
  void set_speechkitversion(const char* value, size_t size);
  ::std::string* mutable_speechkitversion();
  ::std::string* release_speechkitversion();
  void set_allocated_speechkitversion(::std::string* speechkitversion);

  // required string serviceName = 3;
  bool has_servicename() const;
  void clear_servicename();
  static const int kServiceNameFieldNumber = 3;
  const ::std::string& servicename() const;
  void set_servicename(const ::std::string& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  ::std::string* mutable_servicename();
  ::std::string* release_servicename();
  void set_allocated_servicename(::std::string* servicename);

  // required string uuid = 4;
  bool has_uuid() const;
  void clear_uuid();
  static const int kUuidFieldNumber = 4;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // required string apiKey = 5;
  bool has_apikey() const;
  void clear_apikey();
  static const int kApiKeyFieldNumber = 5;
  const ::std::string& apikey() const;
  void set_apikey(const ::std::string& value);
  void set_apikey(const char* value);
  void set_apikey(const char* value, size_t size);
  ::std::string* mutable_apikey();
  ::std::string* release_apikey();
  void set_allocated_apikey(::std::string* apikey);

  // required string applicationName = 6;
  bool has_applicationname() const;
  void clear_applicationname();
  static const int kApplicationNameFieldNumber = 6;
  const ::std::string& applicationname() const;
  void set_applicationname(const ::std::string& value);
  void set_applicationname(const char* value);
  void set_applicationname(const char* value, size_t size);
  ::std::string* mutable_applicationname();
  ::std::string* release_applicationname();
  void set_allocated_applicationname(::std::string* applicationname);

  // required string device = 7;
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 7;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // required string coords = 8;
  bool has_coords() const;
  void clear_coords();
  static const int kCoordsFieldNumber = 8;
  const ::std::string& coords() const;
  void set_coords(const ::std::string& value);
  void set_coords(const char* value);
  void set_coords(const char* value, size_t size);
  ::std::string* mutable_coords();
  ::std::string* release_coords();
  void set_allocated_coords(::std::string* coords);

  // required string topic = 9;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 9;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // required string lang = 10;
  bool has_lang() const;
  void clear_lang();
  static const int kLangFieldNumber = 10;
  const ::std::string& lang() const;
  void set_lang(const ::std::string& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  ::std::string* mutable_lang();
  ::std::string* release_lang();
  void set_allocated_lang(::std::string* lang);

  // required string format = 11;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 11;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // optional bool punctuation = 12 [default = true];
  bool has_punctuation() const;
  void clear_punctuation();
  static const int kPunctuationFieldNumber = 12;
  bool punctuation() const;
  void set_punctuation(bool value);

  // optional string deviceName = 13;
  bool has_devicename() const;
  void clear_devicename();
  static const int kDeviceNameFieldNumber = 13;
  const ::std::string& devicename() const;
  void set_devicename(const ::std::string& value);
  void set_devicename(const char* value);
  void set_devicename(const char* value, size_t size);
  ::std::string* mutable_devicename();
  ::std::string* release_devicename();
  void set_allocated_devicename(::std::string* devicename);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.ConnectionRequest)
 private:
  inline void set_has_protocolversion();
  inline void clear_has_protocolversion();
  inline void set_has_speechkitversion();
  inline void clear_has_speechkitversion();
  inline void set_has_servicename();
  inline void clear_has_servicename();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_apikey();
  inline void clear_has_apikey();
  inline void set_has_applicationname();
  inline void clear_has_applicationname();
  inline void set_has_device();
  inline void clear_has_device();
  inline void set_has_coords();
  inline void clear_has_coords();
  inline void set_has_topic();
  inline void clear_has_topic();
  inline void set_has_lang();
  inline void clear_has_lang();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_punctuation();
  inline void clear_has_punctuation();
  inline void set_has_devicename();
  inline void clear_has_devicename();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr speechkitversion_;
  ::google::protobuf::internal::ArenaStringPtr servicename_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr apikey_;
  ::google::protobuf::internal::ArenaStringPtr applicationname_;
  ::google::protobuf::int32 protocolversion_;
  bool punctuation_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr coords_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr lang_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  ::google::protobuf::internal::ArenaStringPtr devicename_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static ConnectionRequest* default_instance_;
};
// -------------------------------------------------------------------

class AddData : public ::google::protobuf::Message {
 public:
  AddData();
  virtual ~AddData();

  AddData(const AddData& from);

  inline AddData& operator=(const AddData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddData& default_instance();

  void Swap(AddData* other);

  // implements Message ----------------------------------------------

  inline AddData* New() const { return New(NULL); }

  AddData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddData& from);
  void MergeFrom(const AddData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes audioData = 1;
  bool has_audiodata() const;
  void clear_audiodata();
  static const int kAudioDataFieldNumber = 1;
  const ::std::string& audiodata() const;
  void set_audiodata(const ::std::string& value);
  void set_audiodata(const char* value);
  void set_audiodata(const void* value, size_t size);
  ::std::string* mutable_audiodata();
  ::std::string* release_audiodata();
  void set_allocated_audiodata(::std::string* audiodata);

  // required bool lastChunk = 2;
  bool has_lastchunk() const;
  void clear_lastchunk();
  static const int kLastChunkFieldNumber = 2;
  bool lastchunk() const;
  void set_lastchunk(bool value);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.AddData)
 private:
  inline void set_has_audiodata();
  inline void clear_has_audiodata();
  inline void set_has_lastchunk();
  inline void clear_has_lastchunk();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr audiodata_;
  bool lastchunk_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static AddData* default_instance_;
};
// -------------------------------------------------------------------

class Word : public ::google::protobuf::Message {
 public:
  Word();
  virtual ~Word();

  Word(const Word& from);

  inline Word& operator=(const Word& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Word& default_instance();

  void Swap(Word* other);

  // implements Message ----------------------------------------------

  inline Word* New() const { return New(NULL); }

  Word* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Word& from);
  void MergeFrom(const Word& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Word* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float confidence = 1;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 1;
  float confidence() const;
  void set_confidence(float value);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.Word)
 private:
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_value();
  inline void clear_has_value();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  float confidence_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static Word* default_instance_;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  void Swap(Result* other);

  // implements Message ----------------------------------------------

  inline Result* New() const { return New(NULL); }

  Result* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float confidence = 1;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 1;
  float confidence() const;
  void set_confidence(float value);

  // repeated .VoiceProxyProtobuf.Word words = 2;
  int words_size() const;
  void clear_words();
  static const int kWordsFieldNumber = 2;
  const ::VoiceProxyProtobuf::Word& words(int index) const;
  ::VoiceProxyProtobuf::Word* mutable_words(int index);
  ::VoiceProxyProtobuf::Word* add_words();
  const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word >&
      words() const;
  ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word >*
      mutable_words();

  // optional string normalized = 3;
  bool has_normalized() const;
  void clear_normalized();
  static const int kNormalizedFieldNumber = 3;
  const ::std::string& normalized() const;
  void set_normalized(const ::std::string& value);
  void set_normalized(const char* value);
  void set_normalized(const char* value, size_t size);
  ::std::string* mutable_normalized();
  ::std::string* release_normalized();
  void set_allocated_normalized(::std::string* normalized);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.Result)
 private:
  inline void set_has_confidence();
  inline void clear_has_confidence();
  inline void set_has_normalized();
  inline void clear_has_normalized();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word > words_;
  ::google::protobuf::internal::ArenaStringPtr normalized_;
  float confidence_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static Result* default_instance_;
};
// -------------------------------------------------------------------

class AddDataResponse : public ::google::protobuf::Message {
 public:
  AddDataResponse();
  virtual ~AddDataResponse();

  AddDataResponse(const AddDataResponse& from);

  inline AddDataResponse& operator=(const AddDataResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDataResponse& default_instance();

  void Swap(AddDataResponse* other);

  // implements Message ----------------------------------------------

  inline AddDataResponse* New() const { return New(NULL); }

  AddDataResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddDataResponse& from);
  void MergeFrom(const AddDataResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
  bool has_responsecode() const;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 1;
  ::BasicProtobuf::ConnectionResponse_ResponseCode responsecode() const;
  void set_responsecode(::BasicProtobuf::ConnectionResponse_ResponseCode value);

  // repeated .VoiceProxyProtobuf.Result recognition = 2;
  int recognition_size() const;
  void clear_recognition();
  static const int kRecognitionFieldNumber = 2;
  const ::VoiceProxyProtobuf::Result& recognition(int index) const;
  ::VoiceProxyProtobuf::Result* mutable_recognition(int index);
  ::VoiceProxyProtobuf::Result* add_recognition();
  const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result >&
      recognition() const;
  ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result >*
      mutable_recognition();

  // optional bool endOfUtt = 3 [default = false];
  bool has_endofutt() const;
  void clear_endofutt();
  static const int kEndOfUttFieldNumber = 3;
  bool endofutt() const;
  void set_endofutt(bool value);

  // optional int32 messagesCount = 4 [default = 1];
  bool has_messagescount() const;
  void clear_messagescount();
  static const int kMessagesCountFieldNumber = 4;
  ::google::protobuf::int32 messagescount() const;
  void set_messagescount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VoiceProxyProtobuf.AddDataResponse)
 private:
  inline void set_has_responsecode();
  inline void clear_has_responsecode();
  inline void set_has_endofutt();
  inline void clear_has_endofutt();
  inline void set_has_messagescount();
  inline void clear_has_messagescount();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result > recognition_;
  int responsecode_;
  bool endofutt_;
  ::google::protobuf::int32 messagescount_;
  friend void  protobuf_AddDesc_voiceproxy_2eproto();
  friend void protobuf_AssignDesc_voiceproxy_2eproto();
  friend void protobuf_ShutdownFile_voiceproxy_2eproto();

  void InitAsDefaultInstance();
  static AddDataResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectionRequest

// optional int32 protocolVersion = 1 [default = 1];
inline bool ConnectionRequest::has_protocolversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionRequest::set_has_protocolversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectionRequest::clear_has_protocolversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectionRequest::clear_protocolversion() {
  protocolversion_ = 1;
  clear_has_protocolversion();
}
inline ::google::protobuf::int32 ConnectionRequest::protocolversion() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.protocolVersion)
  return protocolversion_;
}
inline void ConnectionRequest::set_protocolversion(::google::protobuf::int32 value) {
  set_has_protocolversion();
  protocolversion_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.protocolVersion)
}

// required string speechkitVersion = 2;
inline bool ConnectionRequest::has_speechkitversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectionRequest::set_has_speechkitversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectionRequest::clear_has_speechkitversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectionRequest::clear_speechkitversion() {
  speechkitversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_speechkitversion();
}
inline const ::std::string& ConnectionRequest::speechkitversion() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
  return speechkitversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_speechkitversion(const ::std::string& value) {
  set_has_speechkitversion();
  speechkitversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}
inline void ConnectionRequest::set_speechkitversion(const char* value) {
  set_has_speechkitversion();
  speechkitversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}
inline void ConnectionRequest::set_speechkitversion(const char* value, size_t size) {
  set_has_speechkitversion();
  speechkitversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}
inline ::std::string* ConnectionRequest::mutable_speechkitversion() {
  set_has_speechkitversion();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
  return speechkitversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_speechkitversion() {
  clear_has_speechkitversion();
  return speechkitversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_speechkitversion(::std::string* speechkitversion) {
  if (speechkitversion != NULL) {
    set_has_speechkitversion();
  } else {
    clear_has_speechkitversion();
  }
  speechkitversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), speechkitversion);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.speechkitVersion)
}

// required string serviceName = 3;
inline bool ConnectionRequest::has_servicename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectionRequest::set_has_servicename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectionRequest::clear_has_servicename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectionRequest::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_servicename();
}
inline const ::std::string& ConnectionRequest::servicename() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.serviceName)
  return servicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_servicename(const ::std::string& value) {
  set_has_servicename();
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}
inline void ConnectionRequest::set_servicename(const char* value) {
  set_has_servicename();
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}
inline void ConnectionRequest::set_servicename(const char* value, size_t size) {
  set_has_servicename();
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}
inline ::std::string* ConnectionRequest::mutable_servicename() {
  set_has_servicename();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_servicename() {
  clear_has_servicename();
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    set_has_servicename();
  } else {
    clear_has_servicename();
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.serviceName)
}

// required string uuid = 4;
inline bool ConnectionRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectionRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectionRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectionRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
inline const ::std::string& ConnectionRequest::uuid() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.uuid)
}
inline void ConnectionRequest::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.uuid)
}
inline void ConnectionRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.uuid)
}
inline ::std::string* ConnectionRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_uuid() {
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.uuid)
}

// required string apiKey = 5;
inline bool ConnectionRequest::has_apikey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConnectionRequest::set_has_apikey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConnectionRequest::clear_has_apikey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConnectionRequest::clear_apikey() {
  apikey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_apikey();
}
inline const ::std::string& ConnectionRequest::apikey() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.apiKey)
  return apikey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_apikey(const ::std::string& value) {
  set_has_apikey();
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}
inline void ConnectionRequest::set_apikey(const char* value) {
  set_has_apikey();
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}
inline void ConnectionRequest::set_apikey(const char* value, size_t size) {
  set_has_apikey();
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}
inline ::std::string* ConnectionRequest::mutable_apikey() {
  set_has_apikey();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.apiKey)
  return apikey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_apikey() {
  clear_has_apikey();
  return apikey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_apikey(::std::string* apikey) {
  if (apikey != NULL) {
    set_has_apikey();
  } else {
    clear_has_apikey();
  }
  apikey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apikey);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.apiKey)
}

// required string applicationName = 6;
inline bool ConnectionRequest::has_applicationname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConnectionRequest::set_has_applicationname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConnectionRequest::clear_has_applicationname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConnectionRequest::clear_applicationname() {
  applicationname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applicationname();
}
inline const ::std::string& ConnectionRequest::applicationname() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.applicationName)
  return applicationname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_applicationname(const ::std::string& value) {
  set_has_applicationname();
  applicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}
inline void ConnectionRequest::set_applicationname(const char* value) {
  set_has_applicationname();
  applicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}
inline void ConnectionRequest::set_applicationname(const char* value, size_t size) {
  set_has_applicationname();
  applicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}
inline ::std::string* ConnectionRequest::mutable_applicationname() {
  set_has_applicationname();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.applicationName)
  return applicationname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_applicationname() {
  clear_has_applicationname();
  return applicationname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_applicationname(::std::string* applicationname) {
  if (applicationname != NULL) {
    set_has_applicationname();
  } else {
    clear_has_applicationname();
  }
  applicationname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applicationname);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.applicationName)
}

// required string device = 7;
inline bool ConnectionRequest::has_device() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConnectionRequest::set_has_device() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConnectionRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConnectionRequest::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device();
}
inline const ::std::string& ConnectionRequest::device() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.device)
  return device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_device(const ::std::string& value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.device)
}
inline void ConnectionRequest::set_device(const char* value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.device)
}
inline void ConnectionRequest::set_device(const char* value, size_t size) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.device)
}
inline ::std::string* ConnectionRequest::mutable_device() {
  set_has_device();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_device() {
  clear_has_device();
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    set_has_device();
  } else {
    clear_has_device();
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.device)
}

// required string coords = 8;
inline bool ConnectionRequest::has_coords() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConnectionRequest::set_has_coords() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConnectionRequest::clear_has_coords() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConnectionRequest::clear_coords() {
  coords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_coords();
}
inline const ::std::string& ConnectionRequest::coords() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.coords)
  return coords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_coords(const ::std::string& value) {
  set_has_coords();
  coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.coords)
}
inline void ConnectionRequest::set_coords(const char* value) {
  set_has_coords();
  coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.coords)
}
inline void ConnectionRequest::set_coords(const char* value, size_t size) {
  set_has_coords();
  coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.coords)
}
inline ::std::string* ConnectionRequest::mutable_coords() {
  set_has_coords();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.coords)
  return coords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_coords() {
  clear_has_coords();
  return coords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_coords(::std::string* coords) {
  if (coords != NULL) {
    set_has_coords();
  } else {
    clear_has_coords();
  }
  coords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coords);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.coords)
}

// required string topic = 9;
inline bool ConnectionRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConnectionRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConnectionRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConnectionRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
inline const ::std::string& ConnectionRequest::topic() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.topic)
}
inline void ConnectionRequest::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.topic)
}
inline void ConnectionRequest::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.topic)
}
inline ::std::string* ConnectionRequest::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_topic() {
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.topic)
}

// required string lang = 10;
inline bool ConnectionRequest::has_lang() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConnectionRequest::set_has_lang() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConnectionRequest::clear_has_lang() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConnectionRequest::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lang();
}
inline const ::std::string& ConnectionRequest::lang() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_lang(const ::std::string& value) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.lang)
}
inline void ConnectionRequest::set_lang(const char* value) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.lang)
}
inline void ConnectionRequest::set_lang(const char* value, size_t size) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.lang)
}
inline ::std::string* ConnectionRequest::mutable_lang() {
  set_has_lang();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_lang() {
  clear_has_lang();
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    set_has_lang();
  } else {
    clear_has_lang();
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.lang)
}

// required string format = 11;
inline bool ConnectionRequest::has_format() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConnectionRequest::set_has_format() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConnectionRequest::clear_has_format() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConnectionRequest::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_format();
}
inline const ::std::string& ConnectionRequest::format() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.format)
  return format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_format(const ::std::string& value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.format)
}
inline void ConnectionRequest::set_format(const char* value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.format)
}
inline void ConnectionRequest::set_format(const char* value, size_t size) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.format)
}
inline ::std::string* ConnectionRequest::mutable_format() {
  set_has_format();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_format() {
  clear_has_format();
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    set_has_format();
  } else {
    clear_has_format();
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.format)
}

// optional bool punctuation = 12 [default = true];
inline bool ConnectionRequest::has_punctuation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConnectionRequest::set_has_punctuation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConnectionRequest::clear_has_punctuation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConnectionRequest::clear_punctuation() {
  punctuation_ = true;
  clear_has_punctuation();
}
inline bool ConnectionRequest::punctuation() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.punctuation)
  return punctuation_;
}
inline void ConnectionRequest::set_punctuation(bool value) {
  set_has_punctuation();
  punctuation_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.punctuation)
}

// optional string deviceName = 13;
inline bool ConnectionRequest::has_devicename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConnectionRequest::set_has_devicename() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConnectionRequest::clear_has_devicename() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConnectionRequest::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_devicename();
}
inline const ::std::string& ConnectionRequest::devicename() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.ConnectionRequest.deviceName)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_devicename(const ::std::string& value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.ConnectionRequest.deviceName)
}
inline void ConnectionRequest::set_devicename(const char* value) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.ConnectionRequest.deviceName)
}
inline void ConnectionRequest::set_devicename(const char* value, size_t size) {
  set_has_devicename();
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.ConnectionRequest.deviceName)
}
inline ::std::string* ConnectionRequest::mutable_devicename() {
  set_has_devicename();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.ConnectionRequest.deviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionRequest::release_devicename() {
  clear_has_devicename();
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionRequest::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    set_has_devicename();
  } else {
    clear_has_devicename();
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.ConnectionRequest.deviceName)
}

// -------------------------------------------------------------------

// AddData

// optional bytes audioData = 1;
inline bool AddData::has_audiodata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddData::set_has_audiodata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddData::clear_has_audiodata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddData::clear_audiodata() {
  audiodata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_audiodata();
}
inline const ::std::string& AddData::audiodata() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddData.audioData)
  return audiodata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddData::set_audiodata(const ::std::string& value) {
  set_has_audiodata();
  audiodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddData.audioData)
}
inline void AddData::set_audiodata(const char* value) {
  set_has_audiodata();
  audiodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.AddData.audioData)
}
inline void AddData::set_audiodata(const void* value, size_t size) {
  set_has_audiodata();
  audiodata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.AddData.audioData)
}
inline ::std::string* AddData::mutable_audiodata() {
  set_has_audiodata();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AddData.audioData)
  return audiodata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddData::release_audiodata() {
  clear_has_audiodata();
  return audiodata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddData::set_allocated_audiodata(::std::string* audiodata) {
  if (audiodata != NULL) {
    set_has_audiodata();
  } else {
    clear_has_audiodata();
  }
  audiodata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audiodata);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.AddData.audioData)
}

// required bool lastChunk = 2;
inline bool AddData::has_lastchunk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddData::set_has_lastchunk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddData::clear_has_lastchunk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddData::clear_lastchunk() {
  lastchunk_ = false;
  clear_has_lastchunk();
}
inline bool AddData::lastchunk() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddData.lastChunk)
  return lastchunk_;
}
inline void AddData::set_lastchunk(bool value) {
  set_has_lastchunk();
  lastchunk_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddData.lastChunk)
}

// -------------------------------------------------------------------

// Word

// required float confidence = 1;
inline bool Word::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Word::set_has_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Word::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Word::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float Word::confidence() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Word.confidence)
  return confidence_;
}
inline void Word::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Word.confidence)
}

// required string value = 2;
inline bool Word::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Word::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Word::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Word::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Word::value() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Word.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Word::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Word.value)
}
inline void Word::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.Word.value)
}
inline void Word::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.Word.value)
}
inline ::std::string* Word::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Word.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Word::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Word::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.Word.value)
}

// -------------------------------------------------------------------

// Result

// required float confidence = 1;
inline bool Result::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float Result::confidence() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Result.confidence)
  return confidence_;
}
inline void Result::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Result.confidence)
}

// repeated .VoiceProxyProtobuf.Word words = 2;
inline int Result::words_size() const {
  return words_.size();
}
inline void Result::clear_words() {
  words_.Clear();
}
inline const ::VoiceProxyProtobuf::Word& Result::words(int index) const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Result.words)
  return words_.Get(index);
}
inline ::VoiceProxyProtobuf::Word* Result::mutable_words(int index) {
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Result.words)
  return words_.Mutable(index);
}
inline ::VoiceProxyProtobuf::Word* Result::add_words() {
  // @@protoc_insertion_point(field_add:VoiceProxyProtobuf.Result.words)
  return words_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word >&
Result::words() const {
  // @@protoc_insertion_point(field_list:VoiceProxyProtobuf.Result.words)
  return words_;
}
inline ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Word >*
Result::mutable_words() {
  // @@protoc_insertion_point(field_mutable_list:VoiceProxyProtobuf.Result.words)
  return &words_;
}

// optional string normalized = 3;
inline bool Result::has_normalized() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_normalized() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_normalized() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_normalized() {
  normalized_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_normalized();
}
inline const ::std::string& Result::normalized() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.Result.normalized)
  return normalized_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_normalized(const ::std::string& value) {
  set_has_normalized();
  normalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.Result.normalized)
}
inline void Result::set_normalized(const char* value) {
  set_has_normalized();
  normalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VoiceProxyProtobuf.Result.normalized)
}
inline void Result::set_normalized(const char* value, size_t size) {
  set_has_normalized();
  normalized_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VoiceProxyProtobuf.Result.normalized)
}
inline ::std::string* Result::mutable_normalized() {
  set_has_normalized();
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.Result.normalized)
  return normalized_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_normalized() {
  clear_has_normalized();
  return normalized_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_normalized(::std::string* normalized) {
  if (normalized != NULL) {
    set_has_normalized();
  } else {
    clear_has_normalized();
  }
  normalized_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normalized);
  // @@protoc_insertion_point(field_set_allocated:VoiceProxyProtobuf.Result.normalized)
}

// -------------------------------------------------------------------

// AddDataResponse

// required .BasicProtobuf.ConnectionResponse.ResponseCode responseCode = 1;
inline bool AddDataResponse::has_responsecode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddDataResponse::set_has_responsecode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddDataResponse::clear_has_responsecode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddDataResponse::clear_responsecode() {
  responsecode_ = 200;
  clear_has_responsecode();
}
inline ::BasicProtobuf::ConnectionResponse_ResponseCode AddDataResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.responseCode)
  return static_cast< ::BasicProtobuf::ConnectionResponse_ResponseCode >(responsecode_);
}
inline void AddDataResponse::set_responsecode(::BasicProtobuf::ConnectionResponse_ResponseCode value) {
  assert(::BasicProtobuf::ConnectionResponse_ResponseCode_IsValid(value));
  set_has_responsecode();
  responsecode_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddDataResponse.responseCode)
}

// repeated .VoiceProxyProtobuf.Result recognition = 2;
inline int AddDataResponse::recognition_size() const {
  return recognition_.size();
}
inline void AddDataResponse::clear_recognition() {
  recognition_.Clear();
}
inline const ::VoiceProxyProtobuf::Result& AddDataResponse::recognition(int index) const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_.Get(index);
}
inline ::VoiceProxyProtobuf::Result* AddDataResponse::mutable_recognition(int index) {
  // @@protoc_insertion_point(field_mutable:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_.Mutable(index);
}
inline ::VoiceProxyProtobuf::Result* AddDataResponse::add_recognition() {
  // @@protoc_insertion_point(field_add:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result >&
AddDataResponse::recognition() const {
  // @@protoc_insertion_point(field_list:VoiceProxyProtobuf.AddDataResponse.recognition)
  return recognition_;
}
inline ::google::protobuf::RepeatedPtrField< ::VoiceProxyProtobuf::Result >*
AddDataResponse::mutable_recognition() {
  // @@protoc_insertion_point(field_mutable_list:VoiceProxyProtobuf.AddDataResponse.recognition)
  return &recognition_;
}

// optional bool endOfUtt = 3 [default = false];
inline bool AddDataResponse::has_endofutt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddDataResponse::set_has_endofutt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddDataResponse::clear_has_endofutt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddDataResponse::clear_endofutt() {
  endofutt_ = false;
  clear_has_endofutt();
}
inline bool AddDataResponse::endofutt() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.endOfUtt)
  return endofutt_;
}
inline void AddDataResponse::set_endofutt(bool value) {
  set_has_endofutt();
  endofutt_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddDataResponse.endOfUtt)
}

// optional int32 messagesCount = 4 [default = 1];
inline bool AddDataResponse::has_messagescount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddDataResponse::set_has_messagescount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddDataResponse::clear_has_messagescount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddDataResponse::clear_messagescount() {
  messagescount_ = 1;
  clear_has_messagescount();
}
inline ::google::protobuf::int32 AddDataResponse::messagescount() const {
  // @@protoc_insertion_point(field_get:VoiceProxyProtobuf.AddDataResponse.messagesCount)
  return messagescount_;
}
inline void AddDataResponse::set_messagescount(::google::protobuf::int32 value) {
  set_has_messagescount();
  messagescount_ = value;
  // @@protoc_insertion_point(field_set:VoiceProxyProtobuf.AddDataResponse.messagesCount)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace VoiceProxyProtobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_voiceproxy_2eproto__INCLUDED
